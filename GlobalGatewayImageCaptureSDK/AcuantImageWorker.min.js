"use strict";importScripts("AcuantImageService.min.js"),AcuantImageModule().then((e=>{function t(t,a,r,n,i){let s={func:"crop"};if(r>=0){const o=new ArrayBuffer(a);let c=new Uint8Array(o);c.set(e.HEAPU8.subarray(t,t+a),0),s.imgData=c,s.width=r,s.height=n,s.type=i}else switch(r){case-1:s.error="Runtime error.";break;case-2:s.error="Detect (for cropping) did not return OK";break;case-3:s.error="Crop did not return OK";break;default:s.error="Unknown Error Occured"}s&&s.imgData&&s.imgData.buffer?postMessage(s,[s.imgData.buffer]):postMessage(s)}function a(e,t,a,r,n,i,s,o,c){let l={func:"detect"};if(t>=0)l.type=e,l.x1=t,l.y1=a,l.x2=r,l.y2=n,l.x3=i,l.y3=s,l.x4=o,l.y4=c;else switch(t){case-1:l.error="Runtime error.";break;case-2:l.error="Detect did not return OK";break;default:l.error="Unknown Error Occured"}postMessage(l)}function r(t,a){let r={func:"sign"};if(t){const n=new ArrayBuffer(a);let i=new Uint8Array(n);i.set(e.HEAPU8.subarray(t,t+a),0),r.imgData=i}else switch(a){case-1:r.error="Failed to sign image: SIGN_PARSE_ERROR";break;case-2:r.error="Failed to sign image: SIGN_CANNOT_SIGN";break;case-3:r.error="Failed to sign image: SIGN_HASH_ERROR";break;default:r.error="Failed to sign image: UNEXPECTED"}r&&r.imgData&&r.imgData.buffer?postMessage(r,[r.imgData.buffer]):postMessage(r)}function n(e){postMessage({func:"verify",result:e})}function i(t){null!=t&&(e._free(t),t=null)}function s(t){let a=e._malloc(t.length*t.BYTES_PER_ELEMENT);return e.HEAPU8.set(t,a),a}onmessage=o=>{if(o&&o.data)if("crop"===o.data.func){let a=o.data.data;if(a.imgData&&a.width&&a.height){let r=s(a.imgData);const n=e.ccall("acuantCrop","number",["number","number","number"],[r,a.width,a.height]);let o=[];for(let t=0;t<5;t++)o[t]=e.getValue(n+4*t,"i32");t(o[0],o[1],o[2],o[3],o[4]),i(r)}else console.error("missing params"),t(-1,-1,-1,-1)}else if("detect"===o.data.func){let t=o.data.data;if(t.imgData&&t.width&&t.height){let r=s(t.imgData);const n=e.ccall("acuantDetect","number",["number","number","number"],[r,t.width,t.height]);let o=[];for(let t=0;t<9;t++)o[t]=e.getValue(n+4*t,"i32");a(o[0],o[1],o[2],o[3],o[4],o[5],o[6],o[7],o[8]),i(r)}else console.error("missing params"),a(-1,-1,-1,-1,-1,-1,-1,-1,-1)}else if("sign"===o.data.func){let t=o.data.data;if(t.imgData){let a=s(t.imgData);const n=e.ccall("acuantSign","number",["number","number"],[a,t.imgData.byteLength]);let o=[];for(let t=0;t<2;t++)o[t]=e.getValue(n+4*t,"i32");i(a),r(o[0],o[1])}else console.error("missing params"),r(null,-1)}else if("verify"==o.data.func){let t=o.data.data;if(t.imgData){let a=s(t.imgData);const r=e.ccall("acuantVerify","boolean",["number","number"],[a,t.imgData.byteLength]);i(a),n(r)}else console.log("missing params"),n(null)}else"getCvmlVersion"===o.data.func?function(e){postMessage({func:"getCvmlVersion",cvmlVersion:e})}(e.ccall("getAcuantCVMLVersion","string",[],[])||""):console.error("called with no func specified")},postMessage({imageWorker:"started"})}));